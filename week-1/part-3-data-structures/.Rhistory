#Let's start with an array of objects, representing a selection of US cities
const data <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
{'city':'boston', 'state':'MA', 'population':645966, 'land_area':48.3},
{'city':'kansas city', 'state':'MO', 'population':467007, 'land_area':315}
];"
#Let's start with an array of objects, representing a selection of US cities
const data <- "
foo <- "sdsdjfdlsfjkh"
foo <- "[sdsdjfdlsfjkh]]"
foo <- "[sdsdjfdlsf
jkh]]"
foo <- "[sdsdjfdlsf
{}
jkh]]"
foo <- "[sdsdjfdlsf
{}
jkh]]"
foo <- "[
{}
];"
foo <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
];"
foo <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
];"
foo <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
{'city':'boston', 'state':'MA', 'population':645966, 'land_area':48.3},
{'city':'kansas city', 'state':'MO', 'population':467007, 'land_area':315}
];"
#Let's start with an array of objects, representing a selection of US cities
data <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
{'city':'boston', 'state':'MA', 'population':645966, 'land_area':48.3},
{'city':'kansas city', 'state':'MO', 'population':467007, 'land_area':315}
];"
#Let's start with an array of objects, representing a selection of US cities
data.json <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
{'city':'boston', 'state':'MA', 'population':645966, 'land_area':48.3},
{'city':'kansas city', 'state':'MO', 'population':467007, 'land_area':315}
];"
#Let's start with an array of objects, representing a selection of US cities
data.json <- "[
{'city':'seattle', 'state':'WA', 'population':652405, 'land_area':83.9},
{'city':'new york', 'state':'NY', 'population':8405837, 'land_area':302.6},
{'city':'boston', 'state':'MA', 'population':645966, 'land_area':48.3},
{'city':'kansas city', 'state':'MO', 'population':467007, 'land_area':315}
];"
library(jsonlite)
data <- fromJSON(data.json)
json <- '["Mario", "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
fromJSON(json)
# Simplifies into an atomic vector
j <- fromJSON(json)
library(tidyverse)
# Simplifies into an atomic vector
j <- fromJSON(json) %>% as.data.frame
View(j)
json <- '[{"name":"Mario"}, "Peach", null, "Bowser"]'
# Simplifies into an atomic vector
j <- fromJSON(json) %>% as.data.frame
json <- '[{"name":"Mario"}, {"name":"Mario"}, {"name":"Mario"}]'
# Simplifies into an atomic vector
j <- fromJSON(json) %>% as.data.frame
View(j)
json <- '[
{"name":"Mario"},
{"name":"Mario"},
{"name":"Mario"}
]'
# Simplifies into an atomic vector
j <- fromJSON(json) %>% as.data.frame
View(j)
#Let's start with an array of objects, representing a selection of US cities
data.json <- '[
{"city":"seattle", "state":"WA", "population":652405, "land_area":83.9},
{"city":"new york", "state":"NY", "population":8405837, "land_area":302.6},
{"city":"boston", "state":"MA", "population":645966, "land_area":48.3},
{"city":"kansas city", "state":"MO", "population":467007, "land_area":315}
]'
data <- fromJSON(data.json)
View(data)
"foo bar"
"foo bar" %>% to.TitleCase
"foo bar" %>% toTitleCase
library(tools)
"foo bar" %>% toTitleCase
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
for (d in data) {
}
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
for (d in data) {
print(d$city)
}
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
for (d in data) {
print(d)
}
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
for (d in data) {
print(d["city"])
}
print(d[,"city"])
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
for (d in data) {
print(d[,"city"])
}
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(data[,"city"])
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(data[,"city"],"Foo")
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(data[,"city"],"Foo"))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(data[,"city"],"Foo"))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
apply(data, print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
lapply(data, print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
lapply(data$city, print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
lapply(toTitleCase(data$city), print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
lapply(toTitleCase(data$city), function(x) paste(c("a","b","c")))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), function(x) paste(c("a","b","c")))
for (d in data) {
print("d")
}
for (d in data) {
print(d$city)
}
for (d in data) {
print(d[[city]])
}
for (d in data) {
print(d)
}
print(d["city"])
print(d[,"city"])
for (d in data) {
print(d[,"city"])
}
for (d in data) {
print(class(d))
}
print(d[0])
for (d in data) {
print(d[0])
}
for (d in data) {
print(d[0])
}
for (d in data) {
print(d[1])
}
for (d in data) {
print(d)
}
View(data)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), function(x) paste(c("a","b","c")))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), function(x) paste(c(x,"b","c")))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), print)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city))
, print
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
sapply(toTitleCase(data$city), print)
View(data)
str(data)
print(data$city)
print(paste(data$city," is full"))
print(paste(data$city," is full", "\n"))
print(paste(data$city," is full", "\r"))
print(paste(data$city," is full", "\r"))
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population))
##2
#Using array.forEach to sum up the populations of the 4 cities
#and print out the average population of the 4 cities
mean(data$population)
##2
#Using array.forEach to sum up the populations of the 4 cities
#and print out the average population of the 4 cities
sum(data$population)
mean(data$population)
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area)]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area, decreasing = TRUE)]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area, decreasing = FALSE)]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area, decreasing = FALSE),]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area, decreasing = TRUE),]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[sort(data$land_area, decreasing = TRUE),]
sort(data$land_area)
sort(data$land_area, decreasing = TRUE)
order(data$land_area, decreasing = TRUE)
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
data[order(data$land_area, decreasing = TRUE),]
print(toTitleCase(dataByLandArea$city)
print(toTitleCase(dataByLandArea$city))
print(toTitleCase(dataByLandArea$city))
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),]
print(toTitleCase(dataByLandArea$city))
data[order(data$land_area, decreasing = TRUE),] %>%
toTitleCase(.[["city"]])
data[order(data$land_area, decreasing = TRUE),] %>%
toTitleCase(.[[city]])
data[order(data$land_area, decreasing = TRUE),] %>%
print
data[order(data$land_area, decreasing = TRUE),] %>%
print(.)
data[order(data$land_area, decreasing = TRUE),] %>%
print(.$city)
data[order(data$land_area, decreasing = TRUE),] %>%
print(.[[city]])
data[order(data$land_area, decreasing = TRUE),] %>%
print(.[["city"]])
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"]
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"] %>%
print
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"] %>%
toTitleCase %>%
print
View(data)
toTitleCase(data$city) %>%
print
toTitleCase(data$city) %>%
paste(c(.,"foo"))
toTitleCase(data$city) %>%
paste(c(.,"foo")) %>%
print
toTitleCase(data$city) %>%
paste(c("foo")) %>%
print
#Let's start with an array of objects, representing a selection of US cities
data.json <- '[
{"city":"seattle", "state":"WA", "population":652405, "land_area":83.9},
{"city":"new york", "state":"NY", "population":8405837, "land_area":302.6},
{"city":"boston", "state":"MA", "population":645966, "land_area":48.3},
{"city":"kansas city", "state":"MO", "population":467007, "land_area":315}
]'
data <- fromJSON(data.json)
#Let's start with an array of objects, representing a selection of US cities
data.json <- '[
{"city":"seattle", "state":"WA", "population":652405, "land_area":83.9},
{"city":"new york", "state":"NY", "population":8405837, "land_area":302.6},
{"city":"boston", "state":"MA", "population":645966, "land_area":48.3},
{"city":"kansas city", "state":"MO", "population":467007, "land_area":315}
]'
data <- fromJSON(data.json)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population))
##2
#Using array.forEach to sum up the populations of the 4 cities
#and print out the average population of the 4 cities
sum(data$population)
mean(data$population)
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"] %>%
toTitleCase %>%
print
##4
#Using array.map, compute the population density of these 4 cities (population divided by area)
#add population density as a property to each object, and return the array
data$density <- data$population / d$land_area
##4
#Using array.map, compute the population density of these 4 cities (population divided by area)
#add population density as a property to each object, and return the array
data$density <- data$population / data$land_area
View(data)
##4
#Using array.map, compute the population density of these 4 cities (population divided by area)
#add population density as a property to each object, and return the array
data$density <- data$population / data$land_area %>%
print
#Let's start with an array of objects, representing a selection of US cities
data.json <- '[
{"city":"seattle", "state":"WA", "population":652405, "land_area":83.9},
{"city":"new york", "state":"NY", "population":8405837, "land_area":302.6},
{"city":"boston", "state":"MA", "population":645966, "land_area":48.3},
{"city":"kansas city", "state":"MO", "population":467007, "land_area":315}
]'
data <- fromJSON(data.json)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population))
##2
#Using array.forEach to sum up the populations of the 4 cities
#and print out the average population of the 4 cities
sum(data$population)
mean(data$population)
##3
#Sort these 4 cities in terms of land area, from highest to lowest
#And print out the name of the city with the largest land area
#Hint: use array.sort
dataByLandArea <- data[order(data$land_area, decreasing = TRUE),"city"] %>%
toTitleCase %>%
print
##4
#Using array.map, compute the population density of these 4 cities (population divided by area)
#add population density as a property to each object, and return the array
data$density <- data$population / data$land_area %>%
print
View(data)
##5
#Using array.filter, return a subset of the cities with a population <1 million
data$population < 1000000
##5
#Using array.filter, return a subset of the cities with a population <1 million
data[data$population < 1000000,]
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population))
#Let's start with an array of objects, representing a selection of US cities
data.json <- '[
{"city":"seattle", "state":"WA", "population":652405, "land_area":83.9},
{"city":"new york", "state":"NY", "population":8405837, "land_area":302.6},
{"city":"boston", "state":"MA", "population":645966, "land_area":48.3},
{"city":"kansas city", "state":"MO", "population":467007, "land_area":315}
]'
data <- fromJSON(data.json)
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population))
##1
#Using array.forEach, print out (using console.log) the names of the 4 cities, followed by their population.
#The message should have the following sample format
#"seattle, WA has a population of 652405"
print(paste(toTitleCase(data$city),",",data$state," has a population of", data$population, ""))
##5
#Using array.filter, return a subset of the cities with a population <1 million
data[data$population < 1000000,]
##5
#Using array.filter, return a subset of the cities with a population <1 million
data[data$population < 1000000,]
